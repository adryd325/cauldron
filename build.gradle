plugins {
    alias libs.plugins.quilt.loom
    alias libs.plugins.grgit
    id 'maven-publish'

}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

version = project.version + getVersionMetadata()
archivesBaseName = project.archives_base_name + "-mc" + project.minecraft_version
group = project.maven_group

sourceSets {
    testmod {
        compileClasspath += sourceSets.main.compileClasspath
        runtimeClasspath += sourceSets.main.runtimeClasspath
    }
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
}

// All the dependencies are declared at gradle/libs.version.toml and referenced with "libs.<id>"
// See https://docs.gradle.org/current/userguide/platforms.html for information on how version catalogs work.
dependencies {
    minecraft libs.minecraft

    mappings variantOf(libs.yarn) { classifier "v2" }

    modImplementation libs.quilt.loader
    modImplementation libs.quilted.fabric.api

    testmodImplementation sourceSets.main.output

}

processResources {
    inputs.property "version", version

    filesMatching('quilt.mod.json') {
        expand "version": version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    // Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
    it.options.release = 17
}

java {
    // Still required by IDEs such as Eclipse and Visual Studio Code
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    // If this mod is going to be a library, then it should also generate Javadocs in order to aid with development.
    // Uncomment this line to generate them.
    // withJavadocJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

loom {
    runs {
        testmodClient {
            client()
            source(sourceSets.testmod)
        }
    }

}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        maven {
            name = "adryd"
            credentials(PasswordCredentials)
            url = System.getenv("BUILD_RELEASE") == "true" ? uri("https://maven.svc.adryd.com/releases") : uri("https://maven.svc.adryd.com/snapshots")
        }
    }
}

def getVersionMetadata() {
    def release = System.getenv("BUILD_RELEASE") == "true"
    def build_ci_branch = System.getenv("CI_COMMIT_BRANCH")


    if (release) {
        return ""
    }

    if (grgit != null && grgit.status().clean) {
        // 8 chars long to match GitLab's commit IDs
        def id = grgit.head().id[[0..7]]
        def branch = grgit.branch.current().name

        if (branch == "main" || build_ci_branch == "main") {
            return "+" + id
        }

        return "+" + branch + "." + id
    }

    return "+" + new Date().format('yyyyMMdd.HHmmss')
}